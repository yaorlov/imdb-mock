"""
An object with an ID to support global identification.
"""
interface Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
}

"""
Keys that can be used to sort seller profiles
"""
enum MovieSort{
	"""
	Sort seller profiles by title
	"""
	TITLE
}

"""
Sort direction
"""
enum Direction{
	"""
	Sort in ascending order
	"""
	ASC
	"""
	Sort in descending order
	"""
	DESC
}

"""
A monetary value number
"""
scalar Money

type Query{
	"""
	Get current user
	"""
	me: UserAccountType!
	"""
	Get list data by id
	"""
	list(
		id: ID!
	): ListType!
	"""
	Gel list of movies
	"""
	movies(
		"""
	Returns the elements in the list that come after the specified cursor.
	"""
	after: String
		"""
	Returns the elements in the list that come before the specified cursor.
	"""
	before: String
		"""
	Returns the first _n_ elements from the list.
	"""
	first: Int
		"""
	Returns the last _n_ elements from the list.
	"""
	last: Int
		filter: MovieFilterInput
	): MovieConnectionType!
	"""
	Get movie data by id
	"""
	movie(
		id: ID!
	): MovieType!
}

type Mutation{
	"""
	Signs up user. Returns auth tokens
	"""
	userSignup(
		input: UserSignupInput!
	): AuthTokenType!
	"""
	Signin user via email and password
	"""
	userSignin(
		input: UserSigninInput!
	): AuthTokenType!
	"""
	Signout current user from the system
	"""
	userSignout: SignoutType
	"""
	Refresh user token
	"""
	refreshToken: RefreshedAccessPayloadType!
	"""
	Add movie to favorites.
	"""
	userAddFavoriteMovie(
		input: UserAddFavoriteMovieInput!
	): UserAccountType!
	"""
	Add movie to watchlist.
	"""
	userAddWatchlistMovie(
		input: UserAddWatchlistMovieInput!
	): UserAccountType!
	"""
	Remove movie from the list
	"""
	listRemoveItem(
		input: ListRemoveItemInput!
	): ListType!
	"""
	Add movie to the list
	"""
	listAddItem(
		input: ListAddItemInput!
	): ListType!
	"""
	Craete list for the user
	"""
	userCreateList(
		input: UserCreateListInput!
	): UserAccountType!
	"""
	Delete list
	"""
	deleteList(
		input: DeleteInput!
	): DeleteListType!
}

"""
User account
"""
type UserAccountType implements Node{
	"""
	Buyer account's profile
	"""
	userProfile: UserProfileType
	"""
	Email of user account
	"""
	email: String!
	"""
	Globally unique identifier.
	"""
	id: ID!
	"""
	Favorite movies
	"""
	favoriteMovies(
		"""
	Returns the elements in the list that come after the specified cursor.
	"""
	after: String
		"""
	Returns the elements in the list that come before the specified cursor.
	"""
	before: String
		"""
	Returns the first _n_ elements from the list.
	"""
	first: Int
		"""
	Returns the last _n_ elements from the list.
	"""
	last: Int
		orderBy: MovieOrdering
	): MovieConnectionType!
	"""
	Movies lists
	"""
	lists(
		"""
	Returns the elements in the list that come after the specified cursor.
	"""
	after: String
		"""
	Returns the elements in the list that come before the specified cursor.
	"""
	before: String
		"""
	Returns the first _n_ elements from the list.
	"""
	first: Int
		"""
	Returns the last _n_ elements from the list.
	"""
	last: Int
	): ListConnectionType!
	"""
	Watchlist movies
	"""
	watchlistMovies(
		"""
	Returns the elements in the list that come after the specified cursor.
	"""
	after: String
		"""
	Returns the elements in the list that come before the specified cursor.
	"""
	before: String
		"""
	Returns the first _n_ elements from the list.
	"""
	first: Int
		"""
	Returns the last _n_ elements from the list.
	"""
	last: Int
		orderBy: MovieOrdering
	): MovieConnectionType!
}

"""
User profile
"""
type UserProfileType implements Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
	"""
	User avatar
	"""
	avatar: ImageType
	"""
	User's first name
	"""
	firstName: String
	"""
	User's full name
	"""
	fullName: String
	"""
	Buyer's last name
	"""
	lastName: String
}

"""
Auth token provider
"""
type AuthTokenType{
	"""
	Access JWT token
	"""
	access: String!
	"""
	CSRF protection token
	"""
	csrf: String!
	"""
	JWT token for refreshing access token
	"""
	refresh: String!
}

"""
Signout type
"""
type SignoutType{
	"""
	Status of operation
	"""
	completed: Boolean
}

"""
Payload with refreshed access tokens
"""
type RefreshedAccessPayloadType{
	"""
	JWT access token
	"""
	access: String!
	"""
	Expiration of access tokens
	"""
	accessExpiresAt: String!
	"""
	Token for signed cookies
	"""
	csrf: String!
}

type ImageType implements Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
	filePath: String!
}

"""
Delete List type
"""
type DeleteListType{
	"""
	Deleted listid
	"""
	deletedListId: ID!
}

type MovieType implements Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
	title: String!
	originalTitle: String!
	overview: String
	originalLanguage: String
	runtime: String
	budget: Money
	revenue: Money
	year: String
	genres: [GenreType!]
	cast: [CastType!]
	crew: [CrewType!]
	images: [ImageType!]
	poster: ImageType
}

"""
The connection type for MovieType.
"""
type MovieConnectionType{
	"""
	Number of current page
	"""
	currentPage: Int!
	"""
	A list of edges.
	"""
	edges: [MovieEdgeType]
	"""
	List of connected node identifiers
	"""
	nodeIds: [ID!]!
	"""
	A list of nodes.
	"""
	nodes: [MovieType]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Total # of objects returned from query
	"""
	totalCount: Int!
	"""
	Total # of pages, based on total count and pagesize
	"""
	totalPageCount: Int!
}

"""
The connection type for MovieType.
"""
type ListConnectionType{
	"""
	Number of current page
	"""
	currentPage: Int!
	"""
	A list of edges.
	"""
	edges: [ListEdgeType]
	"""
	List of connected node identifiers
	"""
	nodeIds: [ID!]!
	"""
	A list of nodes.
	"""
	nodes: [ListType]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Total # of objects returned from query
	"""
	totalCount: Int!
	"""
	Total # of pages, based on total count and pagesize
	"""
	totalPageCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo{
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
}

"""
An edge in a connection.
"""
type MovieEdgeType{
	"""
	A cursor for use in pagination.
	"""
	cursor: String!
	"""
	The item at the end of the edge.
	"""
	node: MovieType
}

"""
An edge in a connection.
"""
type ListEdgeType{
	"""
	A cursor for use in pagination.
	"""
	cursor: String!
	"""
	The item at the end of the edge.
	"""
	node: ListType
}

type GenreType implements Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
	name: String!
}

type CastType implements Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
	profile: ImageType
	name: String!
	character: String!
}

type CrewType implements Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
	profile: ImageType
	name: String!
	department: String
}

type ListType implements Node{
	"""
	Globally unique identifier.
	"""
	id: ID!
	name: String!
	description: String
	items: [MovieType!]!
}

"""
Input for buyerSignup mutation
"""
input UserSignupInput{
	"""
	Buyer's email
	"""
	email: String!
	"""
	Buyer's first name
	"""
	firstName: String!
	"""
	Buyer's last name
	"""
	lastName: String!
	"""
	Buyer's password
	"""
	password: String!
	"""
	Buyer's password confirmation
	"""
	passwordConfirmation: String!
}

"""
Signin buyer via email and password
"""
input UserSigninInput{
	"""
	email
	"""
	email: String!
	"""
	password
	"""
	password: String!
}

"""
Ordering for Movies.
"""
input MovieOrdering{
	"""
	Sort direction
	"""
	direction: Direction = ASC
	"""
	Sort key
	"""
	sort: MovieSort!
}

input UserAddFavoriteMovieInput{
	"""
	User account id
	"""
	userId: ID!
	"""
	Movie id
	"""
	movieId: ID!
}

input UserAddWatchlistMovieInput{
	"""
	User account id
	"""
	userId: ID!
	"""
	Movie id
	"""
	movieId: ID!
}

input ListRemoveItemInput{
	"""
	List id
	"""
	listId: ID!
	"""
	Movie id
	"""
	movieId: ID!
}

input ListAddItemInput{
	"""
	List id
	"""
	listId: ID!
	"""
	Movie id
	"""
	movieId: ID!
}

input MovieFilterInput{
	title: String!
}

input UserCreateListInput{
	name: String!
	description: String
}

input DeleteInput{
	"""
	Instance id to delete
	"""
	id: ID!
}
schema{
	query: Query,
	mutation: Mutation
}